<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Task Timer - Controle de Tempo</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            padding: 8px;
        }

        .container {
            max-width: 500px;
            margin: 0 auto;
            background: white;
            border-radius: 12px;
            box-shadow: 0 20px 40px rgba(0,0,0,0.1);
            overflow: hidden;
        }

        .header {
            background: linear-gradient(135deg, #3B82F6, #1E40AF);
            color: white;
            padding: 12px 20px;
            text-align: center;
        }

        .header h1 {
            font-size: 18px;
            font-weight: 700;
            margin-bottom: 2px;
        }

        .header p {
            opacity: 0.9;
            font-size: 12px;
        }

        .content {
            padding: 16px;
        }

        .timer-display {
            background: linear-gradient(135deg, #F8FAFC, #E2E8F0);
            border-radius: 12px;
            padding: 16px;
            text-align: center;
            margin-bottom: 16px;
            border: 2px solid #E2E8F0;
        }

        .timer-time {
            font-family: 'Courier New', monospace;
            font-size: 32px;
            font-weight: bold;
            color: #1E293B;
            margin-bottom: 8px;
            letter-spacing: 1px;
        }

        .timer-status {
            display: inline-flex;
            align-items: center;
            padding: 4px 10px;
            border-radius: 16px;
            font-size: 12px;
            font-weight: 600;
        }

        .status-waiting { background: #F1F5F9; color: #64748B; }
        .status-running { background: #DCFCE7; color: #166534; animation: pulse 2s infinite; }
        .status-completed { background: #DBEAFE; color: #1E40AF; }

        @keyframes pulse {
            0%, 100% { transform: scale(1); }
            50% { transform: scale(1.05); }
        }

        .form-section {
            margin-bottom: 12px;
        }

        .form-label {
            display: block;
            font-weight: 600;
            color: #374151;
            margin-bottom: 4px;
            font-size: 13px;
        }

        .form-input {
            width: 100%;
            padding: 10px 12px;
            border: 2px solid #E5E7EB;
            border-radius: 8px;
            font-size: 14px;
            transition: all 0.3s;
        }

        .form-input:focus {
            outline: none;
            border-color: #3B82F6;
            box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
        }

        .form-input:disabled {
            background: #F9FAFB;
            color: #9CA3AF;
            cursor: not-allowed;
        }

        .button-group {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 8px;
            margin-bottom: 12px;
        }

        .btn {
            padding: 10px 14px;
            border: none;
            border-radius: 8px;
            font-size: 13px;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s;
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 4px;
        }

        .btn:disabled {
            background: #E5E7EB !important;
            color: #9CA3AF !important;
            cursor: not-allowed;
        }

        .btn-start { background: linear-gradient(135deg, #10B981, #059669); color: white; }
        .btn-stop { background: linear-gradient(135deg, #EF4444, #DC2626); color: white; }
        .btn-reset { background: linear-gradient(135deg, #6B7280, #4B5563); color: white; grid-column: 1 / -1; }
        .btn-export { background: linear-gradient(135deg, #8B5CF6, #7C3AED); color: white; }
        .btn-history { background: linear-gradient(135deg, #F59E0B, #D97706); color: white; }

        .stats-card {
            background: linear-gradient(135deg, #EFF6FF, #DBEAFE);
            border-radius: 8px;
            padding: 12px;
            margin-bottom: 12px;
            border-left: 3px solid #3B82F6;
        }

        .stats-title {
            font-size: 14px;
            font-weight: 700;
            color: #1E293B;
            margin-bottom: 8px;
        }

        .stats-row {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 4px;
        }

        .stats-label {
            color: #64748B;
            font-size: 12px;
        }

        .stats-value {
            font-weight: 700;
            color: #1E293B;
            font-size: 13px;
        }

        .stats-highlight {
            color: #3B82F6;
            font-size: 15px;
        }

        .session-info {
            background: linear-gradient(135deg, #F0FDF4, #DCFCE7);
            border-radius: 8px;
            padding: 12px;
            margin-bottom: 12px;
            border-left: 3px solid #10B981;
            font-size: 12px;
        }

        .export-buttons {
            display: grid;
            grid-template-columns: 1fr 1fr 1fr;
            gap: 6px;
            margin-bottom: 12px;
        }

        .btn-small {
            padding: 8px 10px;
            font-size: 11px;
        }

        .history-section {
            margin-top: 12px;
        }

        .history-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 12px;
        }

        .history-title {
            font-size: 14px;
            font-weight: 700;
            color: #1E293B;
        }

        .btn-clear {
            background: linear-gradient(135deg, #EF4444, #DC2626);
            color: white;
            padding: 6px 10px;
            border-radius: 6px;
            font-size: 11px;
            border: none;
            cursor: pointer;
        }

        .history-list {
            background: #F8FAFC;
            border-radius: 8px;
            padding: 8px;
            max-height: 300px;
            overflow-y: auto;
        }

        .history-item {
            background: white;
            border-radius: 6px;
            padding: 10px;
            margin-bottom: 8px;
            display: flex;
            justify-content: space-between;
            align-items: flex-start;
            box-shadow: 0 2px 4px rgba(0,0,0,0.08);
            border-left: 3px solid #3B82F6;
        }

        .history-info {
            flex: 1;
        }

        .history-theme {
            font-weight: 700;
            color: #1E293B;
            margin-bottom: 4px;
            font-size: 13px;
        }

        .history-details {
            font-size: 11px;
            color: #64748B;
            line-height: 1.3;
        }

        .history-duration {
            font-weight: 700;
            color: #3B82F6;
            margin-top: 4px;
            font-size: 12px;
        }

        .btn-delete {
            background: linear-gradient(135deg, #EF4444, #DC2626);
            color: white;
            border: none;
            padding: 4px 6px;
            border-radius: 4px;
            cursor: pointer;
            font-size: 12px;
        }

        .empty-state {
            text-align: center;
            color: #64748B;
            padding: 20px;
            font-style: italic;
            font-size: 13px;
        }

        .hidden { display: none; }

        @media (max-width: 350px) {
            .timer-time { font-size: 24px; }
            .export-buttons { grid-template-columns: 1fr; gap: 4px; }
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>‚è±Ô∏è Task Timer</h1>
            <p>Controle Inteligente de Tempo de Tarefas</p>
        </div>

        <div class="content">
            <!-- Display do Timer -->
            <div class="timer-display">
                <div id="timerTime" class="timer-time">00:00</div>
                <div id="timerStatus" class="timer-status status-waiting">
                    ‚è∏Ô∏è Aguardando in√≠cio
                </div>
            </div>

            <!-- Campo do Tema -->
            <div class="form-section">
                <label for="taskTheme" class="form-label">üéØ Tema da Tarefa</label>
                <input type="text" id="taskTheme" class="form-input" placeholder="Descreva a tarefa..." maxlength="100">
            </div>

            <!-- Bot√µes de Controle -->
            <div class="button-group">
                <button id="startBtn" class="btn btn-start">‚ñ∂Ô∏è Iniciar</button>
                <button id="stopBtn" class="btn btn-stop" disabled>‚èπÔ∏è Finalizar</button>
                <button id="resetBtn" class="btn btn-reset">üîÑ Resetar</button>
            </div>

            <!-- Informa√ß√µes da Sess√£o Atual -->
            <div id="sessionInfo" class="session-info hidden">
                <div style="font-weight: 700; margin-bottom: 6px; color: #166534;">üìã Sess√£o Atual</div>
                <div id="sessionDetails"></div>
            </div>

            <!-- Estat√≠sticas do Dia -->
            <div id="statsCard" class="stats-card hidden">
                <div class="stats-title">üìä Resumo do Dia</div>
                <div class="stats-row">
                    <span class="stats-label">Tempo total trabalhado:</span>
                    <span id="totalTime" class="stats-value stats-highlight">00:00</span>
                </div>
                <div class="stats-row">
                    <span class="stats-label">Atividades conclu√≠das:</span>
                    <span id="totalActivities" class="stats-value">0</span>
                </div>
            </div>

            <!-- Bot√µes de Exporta√ß√£o e Hist√≥rico -->
            <div class="export-buttons">
                <button id="exportTxtBtn" class="btn btn-export btn-small" disabled>üìÑ Relat√≥rio</button>
                <button id="shareTxtBtn" class="btn btn-export btn-small" disabled>üì§ Compartilhar</button>
                <button id="historyToggle" class="btn btn-history btn-small">üìã Hist√≥rico</button>
            </div>

            <!-- Se√ß√£o do Hist√≥rico -->
            <div id="historySection" class="history-section hidden">
                <div class="history-header">
                    <h3 class="history-title">üìö Hist√≥rico de Atividades</h3>
                    <button id="clearHistoryBtn" class="btn btn-clear btn-small">üóëÔ∏è Limpar Tudo</button>
                </div>
                <div id="historyList" class="history-list">
                    <div class="empty-state">
                        Nenhuma atividade registrada ainda.<br>
                        Inicie uma tarefa para come√ßar! üöÄ
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script>
        // Vari√°veis globais
        let timerData = {
            activities: JSON.parse(localStorage.getItem('taskTimerData') || '[]'),
            isRunning: false,
            startTime: null,
            endTime: null,
            currentInterval: null
        };

        // Elementos DOM
        const elements = {
            taskTheme: document.getElementById('taskTheme'),
            timerTime: document.getElementById('timerTime'),
            timerStatus: document.getElementById('timerStatus'),
            startBtn: document.getElementById('startBtn'),
            stopBtn: document.getElementById('stopBtn'),
            resetBtn: document.getElementById('resetBtn'),
            sessionInfo: document.getElementById('sessionInfo'),
            sessionDetails: document.getElementById('sessionDetails'),
            statsCard: document.getElementById('statsCard'),
            totalTime: document.getElementById('totalTime'),
            totalActivities: document.getElementById('totalActivities'),
            historyToggle: document.getElementById('historyToggle'),
            historySection: document.getElementById('historySection'),
            historyList: document.getElementById('historyList'),
            exportTxtBtn: document.getElementById('exportTxtBtn'),
            shareTxtBtn: document.getElementById('shareTxtBtn'),
            clearHistoryBtn: document.getElementById('clearHistoryBtn')
        };

        // Fun√ß√£o para formatar tempo
        function formatTime(milliseconds) {
            const totalSeconds = Math.floor(milliseconds / 1000);
            const hours = Math.floor(totalSeconds / 3600);
            const minutes = Math.floor((totalSeconds % 3600) / 60);
            const seconds = Math.floor(totalSeconds % 60);
            
            if (hours > 0) {
                return `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
            }
            return `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
        }

        function formatDateTime(timestamp) {
            if (!timestamp) return '--:--:--';
            return new Date(timestamp).toLocaleTimeString('pt-BR');
        }

        function formatDate(timestamp) {
            return new Date(timestamp).toLocaleDateString('pt-BR');
        }

        // Fun√ß√£o para iniciar timer
        function handleStart() {
            const theme = elements.taskTheme.value.trim();
            if (!theme) {
                alert('‚ö†Ô∏è Por favor, insira o tema da tarefa antes de iniciar!');
                elements.taskTheme.focus();
                return;
            }

            timerData.isRunning = true;
            timerData.startTime = Date.now();
            timerData.endTime = null;

            elements.startBtn.disabled = true;
            elements.stopBtn.disabled = false;
            elements.taskTheme.disabled = true;
            
            updateTimerStatus('running');
            startTimer();
            updateSessionInfo();
            elements.sessionInfo.classList.remove('hidden');
        }

        function handleStop() {
            if (!timerData.startTime || !timerData.isRunning) return;

            timerData.isRunning = false;
            timerData.endTime = Date.now();
            clearInterval(timerData.currentInterval);
            
            const duration = timerData.endTime - timerData.startTime;

            const activity = {
                id: Date.now(),
                theme: elements.taskTheme.value.trim(),
                startTime: timerData.startTime,
                endTime: timerData.endTime,
                duration: duration,
                date: formatDate(timerData.startTime)
            };

            timerData.activities.push(activity);
            saveData();

            elements.startBtn.disabled = false;
            elements.stopBtn.disabled = true;
            elements.taskTheme.disabled = false;
            
            updateTimerStatus('completed');
            updateSessionInfo();
            updateUI();
        }

        function handleReset() {
            const isConfirm = timerData.isRunning ? 
                confirm('‚ö†Ô∏è Tem certeza que deseja resetar? O tempo atual ser√° perdido.') : 
                true;
            
            if (!isConfirm) return;

            timerData.isRunning = false;
            timerData.startTime = null;
            timerData.endTime = null;
            
            clearInterval(timerData.currentInterval);

            elements.taskTheme.value = '';
            elements.taskTheme.disabled = false;
            elements.timerTime.textContent = '00:00';
            elements.startBtn.disabled = false;
            elements.stopBtn.disabled = true;
            elements.sessionInfo.classList.add('hidden');
            
            updateTimerStatus('waiting');
        }

        function startTimer() {
            timerData.currentInterval = setInterval(() => {
                if (timerData.startTime && timerData.isRunning) {
                    const elapsed = Date.now() - timerData.startTime;
                    elements.timerTime.textContent = formatTime(elapsed);
                    updateSessionInfo();
                }
            }, 100);
        }

        function updateTimerStatus(status) {
            const statusElement = elements.timerStatus;
            statusElement.className = 'timer-status';

            switch (status) {
                case 'waiting':
                    statusElement.className += ' status-waiting';
                    statusElement.innerHTML = '‚è∏Ô∏è Aguardando in√≠cio';
                    break;
                case 'running':
                    statusElement.className += ' status-running';
                    statusElement.innerHTML = 'üü¢ Em andamento';
                    break;
                case 'completed':
                    statusElement.className += ' status-completed';
                    statusElement.innerHTML = '‚úÖ Tarefa conclu√≠da';
                    break;
            }
        }

        function updateSessionInfo() {
            if (!timerData.startTime) return;

            const currentDuration = timerData.isRunning ? 
                Date.now() - timerData.startTime : 
                timerData.endTime - timerData.startTime;

            elements.sessionDetails.innerHTML = `
                <div style="display: grid; gap: 4px;">
                    <div style="display: flex; justify-content: space-between;">
                        <span>üéØ <strong>Tarefa:</strong></span>
                        <span style="max-width: 180px; text-align: right; word-wrap: break-word; font-size: 11px;">
                            ${elements.taskTheme.value || 'Sem tema definido'}
                        </span>
                    </div>
                    <div style="display: flex; justify-content: space-between;">
                        <span>‚è∞ <strong>In√≠cio:</strong></span>
                        <span>${formatDateTime(timerData.startTime)}</span>
                    </div>
                    <div style="display: flex; justify-content: space-between;">
                        <span>üèÅ <strong>Fim:</strong></span>
                        <span>${formatDateTime(timerData.endTime)}</span>
                    </div>
                    <div style="display: flex; justify-content: space-between; border-top: 1px solid #10B981; padding-top: 4px; margin-top: 4px;">
                        <span>‚è±Ô∏è <strong>Dura√ß√£o:</strong></span>
                        <span style="color: #10B981; font-weight: bold;">
                            ${formatTime(currentDuration)}
                        </span>
                    </div>
                </div>
            `;
        }

        function updateUI() {
            const todayActivities = getTodayActivities();

            if (todayActivities.length > 0) {
                elements.statsCard.classList.remove('hidden');
                
                // Corrigir soma usando parseInt para garantir precis√£o
                let totalMs = 0;
                todayActivities.forEach(activity => {
                    totalMs += parseInt(activity.duration, 10);
                });
                
                elements.totalTime.textContent = formatTime(totalMs);
                elements.totalActivities.textContent = todayActivities.length;

                elements.exportTxtBtn.disabled = false;
                elements.shareTxtBtn.disabled = false;
            } else {
                elements.statsCard.classList.add('hidden');
                elements.exportTxtBtn.disabled = true;
                elements.shareTxtBtn.disabled = true;
            }

            updateHistoryList();
        }

        function getTodayActivities() {
            const today = new Date().toLocaleDateString('pt-BR');
            return timerData.activities.filter(activity => activity.date === today);
        }

        function toggleHistory() {
            const isHidden = elements.historySection.classList.contains('hidden');
            elements.historySection.classList.toggle('hidden');
            elements.historyToggle.textContent = isHidden ? 'üìã Ocultar' : 'üìã Hist√≥rico';
        }

        function updateHistoryList() {
            if (timerData.activities.length === 0) {
                elements.historyList.innerHTML = `
                    <div class="empty-state">
                        Nenhuma atividade registrada ainda.<br>
                        Inicie uma tarefa para come√ßar! üöÄ
                    </div>
                `;
                return;
            }

            const html = timerData.activities.slice().reverse().map((activity) => `
                <div class="history-item">
                    <div class="history-info">
                        <div class="history-theme">${activity.theme}</div>
                        <div class="history-details">
                            üìÖ ${activity.date}<br>
                            üïê ${formatDateTime(activity.startTime)} - ${formatDateTime(activity.endTime)}
                        </div>
                        <div class="history-duration">‚è±Ô∏è ${formatTime(activity.duration)}</div>
                    </div>
                    <button class="btn-delete" onclick="deleteActivity(${activity.id})" title="Excluir atividade">
                        üóëÔ∏è
                    </button>
                </div>
            `).join('');

            elements.historyList.innerHTML = html;
        }

        function deleteActivity(id) {
            if (!confirm('‚ùå Tem certeza que deseja excluir esta atividade?')) return;
            timerData.activities = timerData.activities.filter(activity => activity.id !== id);
            saveData();
            updateUI();
        }

        function clearHistory() {
            if (timerData.activities.length === 0) {
                alert('‚ÑπÔ∏è N√£o h√° atividades para limpar.');
                return;
            }
            if (!confirm('‚ö†Ô∏è Tem certeza que deseja limpar TODO o hist√≥rico?\n\nEsta a√ß√£o n√£o pode ser desfeita!')) return;
            timerData.activities = [];
            saveData();
            updateUI();
            alert('üóëÔ∏è Hist√≥rico limpo com sucesso!');
        }

        function saveData() {
            try {
                localStorage.setItem('taskTimerData', JSON.stringify(timerData.activities));
            } catch (error) {
                console.error('Erro ao salvar dados:', error);
            }
        }

        function exportTXT() {
            const todayActivities = getTodayActivities();
            if (todayActivities.length === 0) return;

            const today = new Date().toLocaleDateString('pt-BR');
            let content = `üìä RELAT√ìRIO DE ATIVIDADES - ${today}\n${'='.repeat(50)}\n\n`;

            console.log('=== DEBUG EXPORTA√á√ÉO ===');
            let totalMs = 0;

            todayActivities.forEach((activity, index) => {
                console.log(`Atividade ${index + 1}: ${activity.theme}`);
                console.log(`  Dura√ß√£o (ms): ${activity.duration}`);
                console.log(`  Dura√ß√£o (formatada): ${formatTime(activity.duration)}`);
                
                content += `${index + 1}. üìù ${activity.theme}\n`;
                content += `   ‚è∞ In√≠cio: ${formatDateTime(activity.startTime)}\n`;
                content += `   üèÅ Fim: ${formatDateTime(activity.endTime)}\n`;
                content += `   ‚è±Ô∏è Dura√ß√£o: ${formatTime(activity.duration)}\n\n`;
                
                totalMs += parseInt(activity.duration, 10);
            });

            console.log(`Total calculado (ms): ${totalMs}`);
            console.log(`Total formatado: ${formatTime(totalMs)}`);
            
            content += `${'='.repeat(50)}\n`;
            content += `üìà TEMPO TOTAL DO DIA: ${formatTime(totalMs)}\n`;
            content += `üìã TOTAL DE ATIVIDADES: ${todayActivities.length}\n`;
            content += `üìÖ RELAT√ìRIO GERADO EM: ${new Date().toLocaleString('pt-BR')}`;

            const blob = new Blob([content], { type: 'text/plain' });
            const url = URL.createObjectURL(blob);
            const link = document.createElement('a');
            link.href = url;
            link.download = `relatorio_atividades_${today.replace(/\//g, '-')}.txt`;
            link.click();
            URL.revokeObjectURL(url);
            
            console.log('=== FIM DEBUG ===');
        }

        function shareTXT() {
            const todayActivities = getTodayActivities();
            if (todayActivities.length === 0) return;

            const today = new Date().toLocaleDateString('pt-BR');
            let content = `üìä RELAT√ìRIO DE ATIVIDADES - ${today}\n${'='.repeat(40)}\n\n`;

            let totalMs = 0;
            todayActivities.forEach((activity, index) => {
                content += `${index + 1}. üìù ${activity.theme}\n`;
                content += `   ‚è∞ ${formatDateTime(activity.startTime)} - üèÅ ${formatDateTime(activity.endTime)}\n`;
                content += `   ‚è±Ô∏è Dura√ß√£o: ${formatTime(activity.duration)}\n\n`;
                totalMs += parseInt(activity.duration, 10);
            });

            content += `${'='.repeat(40)}\n`;
            content += `üìà TOTAL: ${formatTime(totalMs)} (${todayActivities.length} atividades)\n`;
            content += `üìÖ ${new Date().toLocaleString('pt-BR')}`;

            if (navigator.clipboard) {
                navigator.clipboard.writeText(content).then(() => {
                    alert('üìã Relat√≥rio copiado para √°rea de transfer√™ncia!');
                });
            } else {
                alert('‚ùå N√£o foi poss√≠vel copiar automaticamente. Use o bot√£o Relat√≥rio para baixar o arquivo.');
            }
        }

        // Event Listeners
        elements.startBtn.addEventListener('click', handleStart);
        elements.stopBtn.addEventListener('click', handleStop);
        elements.resetBtn.addEventListener('click', handleReset);
        elements.historyToggle.addEventListener('click', toggleHistory);
        elements.exportTxtBtn.addEventListener('click', exportTXT);
        elements.shareTxtBtn.addEventListener('click', shareTXT);
        elements.clearHistoryBtn.addEventListener('click', clearHistory);

        // Inicializa√ß√£o
        document.addEventListener('DOMContentLoaded', function() {
            updateUI();
        });

        // Atualizar UI na inicializa√ß√£o
        updateUI();
    </script>
</body>
</html>
