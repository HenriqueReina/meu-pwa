<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Task Timer - Controle de Tempo</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            padding: 20px;
        }

        .container {
            max-width: 600px;
            margin: 0 auto;
            background: white;
            border-radius: 20px;
            box-shadow: 0 20px 40px rgba(0,0,0,0.1);
            overflow: hidden;
        }

        .header {
            background: linear-gradient(135deg, #3B82F6, #1E40AF);
            color: white;
            padding: 30px;
            text-align: center;
        }

        .header h1 {
            font-size: 28px;
            font-weight: 700;
            margin-bottom: 8px;
        }

        .header p {
            opacity: 0.9;
            font-size: 16px;
        }

        .content {
            padding: 30px;
        }

        .timer-display {
            background: linear-gradient(135deg, #F8FAFC, #E2E8F0);
            border-radius: 20px;
            padding: 40px 30px;
            text-align: center;
            margin-bottom: 30px;
            border: 3px solid #E2E8F0;
        }

        .timer-time {
            font-family: 'Courier New', monospace;
            font-size: 56px;
            font-weight: bold;
            color: #1E293B;
            margin-bottom: 15px;
            letter-spacing: 2px;
        }

        .timer-status {
            display: inline-flex;
            align-items: center;
            padding: 10px 20px;
            border-radius: 25px;
            font-size: 16px;
            font-weight: 600;
            transition: all 0.3s;
        }

        .status-waiting {
            background: #F1F5F9;
            color: #64748B;
        }

        .status-running {
            background: #DCFCE7;
            color: #166534;
            animation: pulse 2s infinite;
        }

        .status-completed {
            background: #DBEAFE;
            color: #1E40AF;
        }

        @keyframes pulse {
            0%, 100% { transform: scale(1); }
            50% { transform: scale(1.05); }
        }

        .form-section {
            margin-bottom: 30px;
        }

        .form-label {
            display: block;
            font-weight: 600;
            color: #374151;
            margin-bottom: 10px;
            font-size: 16px;
        }

        .form-input {
            width: 100%;
            padding: 16px 20px;
            border: 2px solid #E5E7EB;
            border-radius: 15px;
            font-size: 16px;
            transition: all 0.3s;
            background: white;
        }

        .form-input:focus {
            outline: none;
            border-color: #3B82F6;
            box-shadow: 0 0 0 4px rgba(59, 130, 246, 0.1);
        }

        .form-input:disabled {
            background: #F9FAFB;
            color: #9CA3AF;
            cursor: not-allowed;
        }

        .button-group {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 15px;
            margin-bottom: 20px;
        }

        .btn {
            padding: 18px 25px;
            border: none;
            border-radius: 15px;
            font-size: 16px;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s;
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 10px;
        }

        .btn:hover:not(:disabled) {
            transform: translateY(-2px);
            box-shadow: 0 10px 25px rgba(0,0,0,0.15);
        }

        .btn:active:not(:disabled) {
            transform: translateY(0);
        }

        .btn:disabled {
            background: #E5E7EB !important;
            color: #9CA3AF !important;
            cursor: not-allowed;
            transform: none;
            box-shadow: none;
        }

        .btn-start {
            background: linear-gradient(135deg, #10B981, #059669);
            color: white;
        }

        .btn-stop {
            background: linear-gradient(135deg, #EF4444, #DC2626);
            color: white;
        }

        .btn-reset {
            background: linear-gradient(135deg, #6B7280, #4B5563);
            color: white;
            grid-column: 1 / -1;
        }

        .btn-export {
            background: linear-gradient(135deg, #8B5CF6, #7C3AED);
            color: white;
        }

        .btn-history {
            background: linear-gradient(135deg, #F59E0B, #D97706);
            color: white;
        }

        .stats-card {
            background: linear-gradient(135deg, #EFF6FF, #DBEAFE);
            border-radius: 15px;
            padding: 25px;
            margin-bottom: 20px;
            border-left: 5px solid #3B82F6;
        }

        .stats-title {
            font-size: 18px;
            font-weight: 700;
            color: #1E293B;
            margin-bottom: 15px;
        }

        .stats-row {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 10px;
        }

        .stats-label {
            color: #64748B;
            font-size: 15px;
        }

        .stats-value {
            font-weight: 700;
            color: #1E293B;
            font-size: 16px;
        }

        .stats-highlight {
            color: #3B82F6;
            font-size: 20px;
        }

        .history-section {
            margin-top: 25px;
        }

        .history-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
        }

        .history-title {
            font-size: 20px;
            font-weight: 700;
            color: #1E293B;
        }

        .btn-clear {
            background: linear-gradient(135deg, #EF4444, #DC2626);
            color: white;
            padding: 10px 20px;
            border-radius: 10px;
            font-size: 14px;
            border: none;
            cursor: pointer;
        }

        .history-list {
            background: #F8FAFC;
            border-radius: 15px;
            padding: 10px;
            max-height: 400px;
            overflow-y: auto;
        }

        .history-item {
            background: white;
            border-radius: 10px;
            padding: 20px;
            margin-bottom: 10px;
            display: flex;
            justify-content: space-between;
            align-items: flex-start;
            box-shadow: 0 2px 8px rgba(0,0,0,0.08);
            border-left: 4px solid #3B82F6;
        }

        .history-info {
            flex: 1;
        }

        .history-theme {
            font-weight: 700;
            color: #1E293B;
            margin-bottom: 8px;
            font-size: 16px;
        }

        .history-details {
            font-size: 14px;
            color: #64748B;
            line-height: 1.6;
        }

        .history-duration {
            font-weight: 700;
            color: #3B82F6;
            margin-top: 8px;
            font-size: 15px;
        }

        .btn-delete {
            background: linear-gradient(135deg, #EF4444, #DC2626);
            color: white;
            border: none;
            padding: 8px 12px;
            border-radius: 8px;
            cursor: pointer;
            font-size: 16px;
            transition: all 0.3s;
        }

        .btn-delete:hover {
            transform: scale(1.1);
        }

        .empty-state {
            text-align: center;
            color: #64748B;
            padding: 40px 20px;
            font-style: italic;
            font-size: 16px;
        }

        .hidden {
            display: none;
        }

        .session-info {
            background: linear-gradient(135deg, #F0FDF4, #DCFCE7);
            border-radius: 15px;
            padding: 20px;
            margin-bottom: 20px;
            border-left: 5px solid #10B981;
        }

        .export-buttons {
            display: grid;
            grid-template-columns: 1fr 1fr 1fr;
            gap: 10px;
            margin-bottom: 15px;
        }

        .btn-small {
            padding: 12px 16px;
            font-size: 14px;
        }

        @media (max-width: 600px) {
            .container {
                margin: 10px;
                border-radius: 15px;
            }
            
            .timer-time {
                font-size: 42px;
            }
            
            .button-group {
                grid-template-columns: 1fr;
                gap: 10px;
            }
            
            .export-buttons {
                grid-template-columns: 1fr;
                gap: 8px;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>‚è±Ô∏è Task Timer</h1>
            <p>Controle Inteligente de Tempo de Tarefas</p>
        </div>

        <div class="content">
            <!-- Display do Timer -->
            <div class="timer-display">
                <div id="timerTime" class="timer-time">00:00</div>
                <div id="timerStatus" class="timer-status status-waiting">
                    ‚è∏Ô∏è Aguardando in√≠cio
                </div>
            </div>

            <!-- Campo do Tema -->
            <div class="form-section">
                <label for="taskTheme" class="form-label">üéØ Tema da Tarefa</label>
                <input 
                    type="text" 
                    id="taskTheme" 
                    class="form-input"
                    placeholder="Descreva a tarefa que voc√™ vai realizar..."
                    maxlength="100"
                >
            </div>

            <!-- Bot√µes de Controle -->
            <div class="button-group">
                <button id="startBtn" class="btn btn-start">
                    ‚ñ∂Ô∏è Iniciar
                </button>
                <button id="stopBtn" class="btn btn-stop" disabled>
                    ‚èπÔ∏è Finalizar
                </button>
                <button id="resetBtn" class="btn btn-reset">
                    üîÑ Resetar
                </button>
            </div>

            <!-- Informa√ß√µes da Sess√£o Atual -->
            <div id="sessionInfo" class="session-info hidden">
                <h3 style="margin-bottom: 15px; color: #166534;">üìã Sess√£o Atual</h3>
                <div id="sessionDetails"></div>
            </div>

            <!-- Estat√≠sticas do Dia -->
            <div id="statsCard" class="stats-card hidden">
                <div class="stats-title">
                    üìä Resumo do Dia
                </div>
                <div class="stats-row">
                    <span class="stats-label">Tempo total trabalhado:</span>
                    <span id="totalTime" class="stats-value stats-highlight">00:00</span>
                </div>
                <div class="stats-row">
                    <span class="stats-label">Atividades conclu√≠das:</span>
                    <span id="totalActivities" class="stats-value">0</span>
                </div>
            </div>

            <!-- Bot√µes de Exporta√ß√£o e Hist√≥rico -->
            <div class="export-buttons">
                <button id="exportTxtBtn" class="btn btn-export btn-small" disabled>
                    üìÑ Relat√≥rio
                </button>
                <button id="exportCsvBtn" class="btn btn-export btn-small" disabled>
                    üìä CSV
                </button>
                <button id="historyToggle" class="btn btn-history btn-small">
                    üìã Hist√≥rico
                </button>
            </div>

            <!-- Se√ß√£o do Hist√≥rico -->
            <div id="historySection" class="history-section hidden">
                <div class="history-header">
                    <h3 class="history-title">üìö Hist√≥rico de Atividades</h3>
                    <button id="clearHistoryBtn" class="btn btn-clear btn-small">
                        üóëÔ∏è Limpar Tudo
                    </button>
                </div>
                <div id="historyList" class="history-list">
                    <div class="empty-state">
                        Nenhuma atividade registrada ainda.<br>
                        Inicie uma tarefa para come√ßar! üöÄ
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script>
        // Vari√°veis globais para armazenar dados em mem√≥ria
        let timerData = {
            activities: [],
            isRunning: false,
            startTime: null,
            endTime: null,
            currentInterval: null
        };

        // Elementos DOM
        let elements = {};

        // Inicializa√ß√£o quando o DOM estiver carregado
        document.addEventListener('DOMContentLoaded', function() {
            initElements();
            bindEvents();
            updateUI();
        });

        function initElements() {
            elements = {
                taskTheme: document.getElementById('taskTheme'),
                timerTime: document.getElementById('timerTime'),
                timerStatus: document.getElementById('timerStatus'),
                startBtn: document.getElementById('startBtn'),
                stopBtn: document.getElementById('stopBtn'),
                resetBtn: document.getElementById('resetBtn'),
                sessionInfo: document.getElementById('sessionInfo'),
                sessionDetails: document.getElementById('sessionDetails'),
                statsCard: document.getElementById('statsCard'),
                totalTime: document.getElementById('totalTime'),
                totalActivities: document.getElementById('totalActivities'),
                historyToggle: document.getElementById('historyToggle'),
                historySection: document.getElementById('historySection'),
                historyList: document.getElementById('historyList'),
                exportTxtBtn: document.getElementById('exportTxtBtn'),
                exportCsvBtn: document.getElementById('exportCsvBtn'),
                clearHistoryBtn: document.getElementById('clearHistoryBtn')
            };
        }

        function bindEvents() {
            elements.startBtn.addEventListener('click', handleStart);
            elements.stopBtn.addEventListener('click', handleStop);
            elements.resetBtn.addEventListener('click', handleReset);
            elements.historyToggle.addEventListener('click', toggleHistory);
            elements.exportTxtBtn.addEventListener('click', exportTXT);
            elements.exportCsvBtn.addEventListener('click', exportCSV);
            elements.clearHistoryBtn.addEventListener('click', clearHistory);
            
            elements.taskTheme.addEventListener('input', function() {
                if (timerData.startTime && timerData.isRunning) {
                    updateSessionInfo();
                }
            });
        }

        function formatTime(milliseconds) {
            const totalSeconds = Math.floor(milliseconds / 1000);
            const hours = Math.floor(totalSeconds / 3600);
            const minutes = Math.floor((totalSeconds % 3600) / 60);
            const seconds = totalSeconds % 60;
            
            if (hours > 0) {
                return `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
            }
            return `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
        }

        function formatDateTime(timestamp) {
            if (!timestamp) return '--:--:--';
            return new Date(timestamp).toLocaleTimeString('pt-BR');
        }

        function formatDate(timestamp) {
            return new Date(timestamp).toLocaleDateString('pt-BR');
        }

        function handleStart() {
            const theme = elements.taskTheme.value.trim();
            if (!theme) {
                alert('‚ö†Ô∏è Por favor, insira o tema da tarefa antes de iniciar!');
                elements.taskTheme.focus();
                return;
            }

            timerData.isRunning = true;
            timerData.startTime = Date.now();
            timerData.endTime = null;

            // Atualizar UI
            elements.startBtn.disabled = true;
            elements.stopBtn.disabled = false;
            elements.taskTheme.disabled = true;
            
            updateTimerStatus('running');
            startTimer();
            updateSessionInfo();
            elements.sessionInfo.classList.remove('hidden');
        }

        function handleStop() {
            if (!timerData.startTime || !timerData.isRunning) return;

            timerData.isRunning = false;
            timerData.endTime = Date.now();
            const duration = timerData.endTime - timerData.startTime;

            // Salvar atividade
            const activity = {
                id: Date.now(),
                theme: elements.taskTheme.value.trim(),
                startTime: timerData.startTime,
                endTime: timerData.endTime,
                duration: duration,
                date: formatDate(timerData.startTime)
            };

            timerData.activities.push(activity);

            // Parar timer
            clearInterval(timerData.currentInterval);

            // Atualizar UI
            elements.startBtn.disabled = false;
            elements.stopBtn.disabled = true;
            elements.taskTheme.disabled = false;
            
            updateTimerStatus('completed');
            updateSessionInfo();
            updateUI();

            // Mostrar notifica√ß√£o
            alert(`‚úÖ Tarefa conclu√≠da!\n\n‚è±Ô∏è Tempo gasto: ${formatTime(duration)}\nüìù Tema: ${activity.theme}`);
        }

        function handleReset() {
            const isConfirm = timerData.isRunning ? 
                confirm('‚ö†Ô∏è Tem certeza que deseja resetar? O tempo atual ser√° perdido.') : 
                true;
            
            if (!isConfirm) return;

            timerData.isRunning = false;
            timerData.startTime = null;
            timerData.endTime = null;
            
            clearInterval(timerData.currentInterval);

            // Reset UI
            elements.taskTheme.value = '';
            elements.taskTheme.disabled = false;
            elements.timerTime.textContent = '00:00';
            elements.startBtn.disabled = false;
            elements.stopBtn.disabled = true;
            elements.sessionInfo.classList.add('hidden');
            
            updateTimerStatus('waiting');
        }

        function startTimer() {
            timerData.currentInterval = setInterval(function() {
                if (timerData.startTime && timerData.isRunning) {
                    const elapsed = Date.now() - timerData.startTime;
                    elements.timerTime.textContent = formatTime(elapsed);
                    updateSessionInfo();
                }
            }, 100);
        }

        function updateTimerStatus(status) {
            const statusElement = elements.timerStatus;
            statusElement.className = 'timer-status';

            switch (status) {
                case 'waiting':
                    statusElement.className += ' status-waiting';
                    statusElement.innerHTML = '‚è∏Ô∏è Aguardando in√≠cio';
                    break;
                case 'running':
                    statusElement.className += ' status-running';
                    statusElement.innerHTML = 'üü¢ Em andamento';
                    break;
                case 'completed':
                    statusElement.className += ' status-completed';
                    statusElement.innerHTML = '‚úÖ Tarefa conclu√≠da';
                    break;
            }
        }

        function updateSessionInfo() {
            if (!timerData.startTime) return;

            const currentDuration = timerData.isRunning ? 
                Date.now() - timerData.startTime : 
                timerData.endTime - timerData.startTime;

            elements.sessionDetails.innerHTML = `
                <div style="display: grid; gap: 8px;">
                    <div style="display: flex; justify-content: space-between;">
                        <span>üéØ <strong>Tarefa:</strong></span>
                        <span style="max-width: 250px; text-align: right; word-wrap: break-word;">
                            ${elements.taskTheme.value || 'Sem tema definido'}
                        </span>
                    </div>
                    <div style="display: flex; justify-content: space-between;">
                        <span>‚è∞ <strong>In√≠cio:</strong></span>
                        <span>${formatDateTime(timerData.startTime)}</span>
                    </div>
                    <div style="display: flex; justify-content: space-between;">
                        <span>üèÅ <strong>Fim:</strong></span>
                        <span>${formatDateTime(timerData.endTime)}</span>
                    </div>
                    <div style="display: flex; justify-content: space-between; border-top: 2px solid #10B981; padding-top: 8px; margin-top: 8px;">
                        <span>‚è±Ô∏è <strong>Dura√ß√£o:</strong></span>
                        <span style="color: #10B981; font-weight: bold; font-size: 16px;">
                            ${formatTime(currentDuration)}
                        </span>
                    </div>
                </div>
            `;
        }

        function updateUI() {
            const hasActivities = timerData.activities.length > 0;
            const todayActivities = getTodayActivities();

            // Atualizar estat√≠sticas
            if (hasActivities) {
                elements.statsCard.classList.remove('hidden');
                const totalTime = todayActivities.reduce((sum, activity) => sum + activity.duration, 0);
                elements.totalTime.textContent = formatTime(totalTime);
                elements.totalActivities.textContent = todayActivities.length;

                // Habilitar bot√µes de exporta√ß√£o
                elements.exportTxtBtn.disabled = false;
                elements.exportCsvBtn.disabled = false;
            } else {
                elements.statsCard.classList.add('hidden');
                elements.exportTxtBtn.disabled = true;
                elements.exportCsvBtn.disabled = true;
            }

            updateHistoryList();
        }

        function getTodayActivities() {
            const today = new Date().toLocaleDateString('pt-BR');
            return timerData.activities.filter(activity => activity.date === today);
        }

        function toggleHistory() {
            const isHidden = elements.historySection.classList.contains('hidden');
            elements.historySection.classList.toggle('hidden');
            elements.historyToggle.innerHTML = isHidden ? 
                'üìã Ocultar' : 
                'üìã Hist√≥rico';
        }

        function updateHistoryList() {
            if (timerData.activities.length === 0) {
                elements.historyList.innerHTML = `
                    <div class="empty-state">
                        Nenhuma atividade registrada ainda.<br>
                        Inicie uma tarefa para come√ßar! üöÄ
                    </div>
                `;
                return;
            }

            const html = timerData.activities.slice().reverse().map(activity => `
                <div class="history-item">
                    <div class="history-info">
                        <div class="history-theme">${activity.theme}</div>
                        <div class="history-details">
                            üìÖ ${activity.date}<br>
                            üïê ${formatDateTime(activity.startTime)} - ${formatDateTime(activity.endTime)}
                        </div>
                        <div class="history-duration">‚è±Ô∏è ${formatTime(activity.duration)}</div>
                    </div>
                    <button class="btn-delete" onclick="deleteActivity(${activity.id})" title="Excluir atividade">
                        üóëÔ∏è
                    </button>
                </div>
            `).join('');

            elements.historyList.innerHTML = html;
        }

        function deleteActivity(id) {
            if (confirm('‚ùå Tem certeza que deseja excluir esta atividade?')) {
                timerData.activities = timerData.activities.filter(activity => activity.id !== id);
                updateUI();
            }
        }

        function clearHistory() {
            if (timerData.activities.length === 0) {
                alert('‚ÑπÔ∏è N√£o h√° atividades para limpar.');
                return;
            }

            if (confirm('‚ö†Ô∏è Tem certeza que deseja limpar TODO o hist√≥rico de atividades?\n\nEsta a√ß√£o n√£o pode ser desfeita!')) {
                timerData.activities = [];
                updateUI();
                alert('üóëÔ∏è Hist√≥rico limpo com sucesso!');
            }
        }

        function exportTXT() {
            const todayActivities = getTodayActivities();
            if (todayActivities.length === 0) {
                alert('‚ö†Ô∏è N√£o h√° atividades de hoje para exportar.');
                return;
            }

            const today = new Date().toLocaleDateString('pt-BR');
            let content = `üìä RELAT√ìRIO DE ATIVIDADES - ${today}\n`;
            content += `${'='.repeat(60)}\n\n`;

            todayActivities.forEach((activity, index) => {
                content += `${index + 1}. üìù ${activity.theme}\n`;
                content += `   ‚è∞ In√≠cio: ${formatDateTime(activity.startTime)}\n`;
                content += `   üèÅ Fim: ${formatDateTime(activity.endTime)}\n`;
                content += `   ‚è±Ô∏è Dura√ß√£o: ${formatTime(activity.duration)}\n\n`;
            });

            const totalTime = todayActivities.reduce((sum, activity) => sum + activity.duration, 0);
            content += `${'='.repeat(60)}\n`;
            content += `üìà TEMPO TOTAL DO DIA: ${formatTime(totalTime)}\n`;
            content += `üìã TOTAL DE ATIVIDADES: ${todayActivities.length}\n`;
            content += `üìÖ RELAT√ìRIO GERADO EM: ${new Date().toLocaleString('pt-BR')}`;

            downloadFile(content, `relatorio_atividades_${today.replace(/\//g, '-')}.txt`, 'text/plain');
        }

        function exportCSV() {
            if (timerData.activities.length === 0) {
                alert('‚ö†Ô∏è N√£o h√° atividades para exportar.');
                return;
            }

            const headers = ['Data', 'Tema', 'Hora In√≠cio', 'Hora Fim', 'Tempo Gasto (HH:MM:SS)'];
            const csvContent = [
                headers.join(';'),
                ...timerData.activities.map(activity => [
                    activity.date,
                    `"${activity.theme}"`,
                    formatDateTime(activity.startTime),
                    formatDateTime(activity.endTime),
                    formatTime(activity.duration)
                ].join(';'))
            ].join('\n');

            const today = new Date().toLocaleDateString('pt-BR');
            downloadFile(
                '\ufeff' + csvContent, // BOM para UTF-8
                `atividades_completas_${today.replace(/\//g, '-')}.csv`, 
                'text/csv;charset=utf-8'
            );
        }

        function downloadFile(content, filename, mimeType) {
            const blob = new Blob([content], { type: mimeType });
            const url = URL.createObjectURL(blob);
            const link = document.createElement('a');
            
            link.href = url;
            link.download = filename;
            link.style.display = 'none';
            
            document.body.appendChild(link);
            link.click();
            document.body.removeChild(link);
            
            URL.revokeObjectURL(url);
            
            // Feedback para o usu√°rio
            setTimeout(() => {
                alert(`üì• Arquivo "${filename}" baixado com sucesso!`);
            }, 100);
        }
    </script>
</body>
</html>
